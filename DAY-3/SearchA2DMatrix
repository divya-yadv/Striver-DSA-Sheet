
O(m + n).
bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix[0].size();
        int m = matrix.size();
        int i = 0,j=n-1;
        // we will start from right upper corner
        // as matrix is sorted if target is less then we should move backward in a row, if target is greater we should go to next row
        while(i >=0 && (i<m) && j>=0 && j<n)
        {
            if(matrix[i][j] == target)
            {
                return true;
            }
            else if(matrix[i][j] > target)
            {
                j--;
            }
            else
            {
                i++;
            }
        }
        return false;
    }
// log(m*n) binary approach 
// here if we see it looks like a sorted array distributed in different rows if we combine all rows its a simple sorted array where we can apply binary search
bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int n = matrix[0].size();
        int m = matrix.size();
         if(n == 0 || m == 0)
            return false;
        // consider it as a single array with n*m elements
       int start = 0;
        int end = n*m-1;
        while(start <= end)
        {
            int mid = start + (end-start)/2;
            // get the indexes
            int element = matrix[mid/n][mid%n];
            if(element == target)
            {
                return true;
            }
            else if(element < target)
            {
                start = mid+1;
            }
            else
            {
                end = mid-1;
            }
        }
        return false;
    }
